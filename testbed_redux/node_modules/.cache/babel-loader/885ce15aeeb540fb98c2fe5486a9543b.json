{"ast":null,"code":"import { actionType } from '../../constants';\n\nconst increment = () => {\n  return {\n    type: actionType.INCREMNET\n  };\n};\n\nconst incrementAsync = () => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(increment()));\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: actionType.DECREMENT\n  };\n};\n\nconst decrementAsync = () => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(decrement()));\n  };\n};\n\nconst add = val => {\n  return {\n    type: actionType.ADD,\n    val\n  };\n};\n\nconst addAsync = val => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(add(val)));\n  };\n};\n\nconst subtract = val => {\n  return {\n    type: actionType.SUBTRACT,\n    val\n  };\n};\n\nconst subtractAsync = val => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(subtract(val)));\n  };\n};\n\nexport { increment, incrementAsync, decrement, decrementAsync, add, addAsync, subtract, subtractAsync };","map":{"version":3,"sources":["/Users/rickyjhc/Desktop/testbed/testbed_react/testbed_redux/src/store/actions/count.js"],"names":["actionType","increment","type","INCREMNET","incrementAsync","dispatch","Promise","resolve","reject","setTimeout","then","decrement","DECREMENT","decrementAsync","add","val","ADD","addAsync","subtract","SUBTRACT","subtractAsync"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAEF,UAAU,CAACG;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAJM,EAIJG,IAJI,CAIC,MAAML,QAAQ,CAACJ,SAAS,EAAV,CAJf,CAAP;AAKD,GAND;AAOD,CARD;;AAUA,MAAMU,SAAS,GAAG,MAAM;AACtB,SAAO;AACLT,IAAAA,IAAI,EAAEF,UAAU,CAACY;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAQR,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAJM,EAIJG,IAJI,CAIC,MAAML,QAAQ,CAACM,SAAS,EAAV,CAJf,CAAP;AAKD,GAND;AAOD,CARD;;AAUA,MAAMG,GAAG,GAAIC,GAAD,IAAS;AACnB,SAAO;AACLb,IAAAA,IAAI,EAAEF,UAAU,CAACgB,GADZ;AAELD,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,QAAQ,GAAIF,GAAD,IAAS;AACxB,SAAQV,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAJM,EAIJG,IAJI,CAIC,MAAML,QAAQ,CAACS,GAAG,CAACC,GAAD,CAAJ,CAJf,CAAP;AAKD,GAND;AAOD,CARD;;AAUA,MAAMG,QAAQ,GAAIH,GAAD,IAAS;AACxB,SAAO;AACLb,IAAAA,IAAI,EAAEF,UAAU,CAACmB,QADZ;AAELJ,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMK,aAAa,GAAIL,GAAD,IAAS;AAC7B,SAAQV,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAJM,EAIJG,IAJI,CAIC,MAAML,QAAQ,CAACa,QAAQ,CAACH,GAAD,CAAT,CAJf,CAAP;AAKD,GAND;AAOD,CARD;;AAUA,SAASd,SAAT,EAAoBG,cAApB,EAAoCO,SAApC,EAA+CE,cAA/C,EAA+DC,GAA/D,EAAoEG,QAApE,EAA8EC,QAA9E,EAAwFE,aAAxF","sourcesContent":["import { actionType } from '../../constants';\n\nconst increment = () => {\n  return {\n    type: actionType.INCREMNET,\n  };\n};\n\nconst incrementAsync = () => {\n  return (dispatch) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(increment()));\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: actionType.DECREMENT,\n  };\n};\n\nconst decrementAsync = () => {\n  return (dispatch) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(decrement()));\n  };\n};\n\nconst add = (val) => {\n  return {\n    type: actionType.ADD,\n    val,\n  };\n};\n\nconst addAsync = (val) => {\n  return (dispatch) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(add(val)));\n  };\n};\n\nconst subtract = (val) => {\n  return {\n    type: actionType.SUBTRACT,\n    val,\n  };\n};\n\nconst subtractAsync = (val) => {\n  return (dispatch) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }).then(() => dispatch(subtract(val)));\n  };\n};\n\nexport { increment, incrementAsync, decrement, decrementAsync, add, addAsync, subtract, subtractAsync };\n"]},"metadata":{},"sourceType":"module"}