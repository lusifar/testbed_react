{"ast":null,"code":"var _jsxFileName = \"/Users/rickyjhc/Desktop/testbed/testbed_react/testbed_typescript/src/components/List/List.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport classes from \"./List.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Container, Row, Col, Card, Form, Alert, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = props => {\n  _s();\n\n  // react-redux\n  const lists = useSelector(state => state.item.lists);\n  const dispatch = useDispatch(); // useRef\n\n  const itemTextEl = useRef(null);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    console.log(e);\n    console.log(itemTextEl.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.List,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"pt-5\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: submitHandler,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"ItemText\",\n                  children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"input\",\n                    placeholder: \"Enter the item's text\",\n                    ref: itemTextEl\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  type: \"submit\",\n                  block: true,\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            className: \"mt-3\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [lists.map(item => {\n                return /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"success\",\n                  children: item.text\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 21\n                }, this);\n              }), props.children]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(List, \"9iEwHWvoFs9kMc6zFeB/sKFzrC8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/rickyjhc/Desktop/testbed/testbed_react/testbed_typescript/src/components/List/List.tsx"],"names":["React","useRef","classes","useSelector","useDispatch","Container","Row","Col","Card","Form","Alert","Button","List","props","lists","state","item","dispatch","itemTextEl","submitHandler","e","preventDefault","console","log","current","value","map","text","id","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,SADF,EAEEC,GAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,KANF,EAOEC,MAPF,QAQO,iBARP;;;AA+BA,MAAMC,IAAsB,GAAIC,KAAD,IAAW;AAAA;;AACxC;AACA,QAAMC,KAAK,GAAGX,WAAW,CAAcY,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,KAAnC,CAAzB;AACA,QAAMG,QAAQ,GAAGb,WAAW,EAA5B,CAHwC,CAKxC;;AACA,QAAMc,UAAU,GAAGjB,MAAM,CAAmB,IAAnB,CAAzB;;AAEA,QAAMkB,aAAa,GAAIC,CAAD,IAAyC;AAC7DA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAU,CAACM,OAAX,CAAoBC,KAAhC;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAEvB,OAAO,CAACU,IAAxB;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,MAArB;AAAA,6BACE,QAAC,GAAD;AAAA,+BACE,QAAC,GAAD;AAAA,kCACE,QAAC,IAAD;AAAA,mCACE,QAAC,IAAD,CAAM,IAAN;AAAA,qCACE,QAAC,IAAD;AAAM,gBAAA,QAAQ,EAAEO,aAAhB;AAAA,wCACE,QAAC,IAAD,CAAM,KAAN;AAAY,kBAAA,SAAS,EAAC,UAAtB;AAAA,yCACE,QAAC,IAAD,CAAM,OAAN;AACE,oBAAA,IAAI,EAAC,OADP;AAEE,oBAAA,WAAW,EAAC,uBAFd;AAGE,oBAAA,GAAG,EAAED;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,MAAD;AAAQ,kBAAA,OAAO,EAAC,SAAhB;AAA0B,kBAAA,IAAI,EAAC,QAA/B;AAAwC,kBAAA,KAAK,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAkBE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAA,mCACE,QAAC,IAAD,CAAM,IAAN;AAAA,yBACGJ,KAAK,CAACY,GAAN,CAAWV,IAAD,IAAU;AACnB,oCACE,QAAC,KAAD;AAAqB,kBAAA,OAAO,EAAC,SAA7B;AAAA,4BACGA,IAAI,CAACW;AADR,mBAAYX,IAAI,CAACY,EAAjB;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD,eANA,CADH,EAQGf,KAAK,CAACgB,QART;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CArDD;;GAAMjB,I;UAEUT,W,EACGC,W;;;KAHbQ,I;AAuDN,eAAeA,IAAf","sourcesContent":["import React, { useRef } from \"react\";\nimport classes from \"./List.module.scss\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  Form,\n  Alert,\n  Button,\n} from \"react-bootstrap\";\n\ninterface TItem {\n  id: string;\n  text: string;\n}\n\ninterface TProps {\n  items: TItem[];\n}\n\ninterface TStateItem {\n  item: {\n    lists: TItem[];\n    favorites: TItem[];\n  };\n}\n\ninterface TAction {\n  type: string;\n  item: TItem;\n}\n\nconst List: React.FC<TProps> = (props) => {\n  // react-redux\n  const lists = useSelector<TStateItem>((state) => state.item.lists) as TItem[];\n  const dispatch = useDispatch<TAction>();\n\n  // useRef\n  const itemTextEl = useRef<HTMLInputElement>(null);\n\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log(e);\n    console.log(itemTextEl.current!.value);\n  };\n\n  return (\n    <div className={classes.List}>\n      <Container className=\"pt-5\">\n        <Row>\n          <Col>\n            <Card>\n              <Card.Body>\n                <Form onSubmit={submitHandler}>\n                  <Form.Group controlId=\"ItemText\">\n                    <Form.Control\n                      type=\"input\"\n                      placeholder=\"Enter the item's text\"\n                      ref={itemTextEl}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Button variant=\"primary\" type=\"submit\" block>\n                    Submit\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n\n            <Card className=\"mt-3\">\n              <Card.Body>\n                {lists.map((item) => {\n                  return (\n                    <Alert key={item.id} variant=\"success\">\n                      {item.text}\n                    </Alert>\n                  );\n                })}\n                {props.children}\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}